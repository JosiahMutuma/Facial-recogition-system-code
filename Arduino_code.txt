 //Low-cost Home security system using OpenCV and Arduino
//by Josiah Mutuma

#include <SoftwareSerial.h>
#include <Servo.h>
#include "Adafruit_MCP23017.h"
#include <Mouse.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>                // library for keyboard
#include <Password.h>              // library for password

SoftwareSerial mySerial(7, 8); //SIM900 Tx & Rx is connected to Arduino #7 & #8
Adafruit_MCP23017 mcp; 
Servo x, y;
int width = 640, height = 480;  // total resolution of the video
int xpos = 90, ypos = 90;  // initial positions of both Servos
int red;
Password password = Password( "9461" );  // password   

const byte rows = 4;                     // four rows       
const byte cols = 4;                     // three columns
char keys[rows][cols] = {                // keys on keypad

{'1','2','3','A'},
{'4','5','6','B'},
{'7','8','9','C'},
{'*','0','#','D'},

};


byte rowPins[rows] = {13,12,11,6};
byte colPins[cols] = {5,4,3,2};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, rows, cols);

 LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display

#define sensor A3      // pin for PIR sensor data
#define reed_sensor A2  // pin for reed_sensor
//#define contact 0     // pin for on/off alarm
#define alarm A0      // pin for siren, buzzer
//#define redLed A2        //  pin for red led
//#define yellowLed A1    // pin for blue led
//int contact = 10;       //used to immediately on/off alarm
int val;
int ledBlink;

int sensorData, sensorData1, sensorData2;
unsigned long timerec,timerec1,tempmemory, tempmemory1, tempmemory2, tempmemory3, tempmemory4, tempmemory5, tempmemory6, tempmemory7, tempmemory8, tempmemory9;
unsigned long temp1, tmerec1, temp3;

int standbytoarmed = 20;    // To delay for standby to armed
int triggeredtoalarm = 10; // To delay for triggered to alarm activated
int alarmtime = 10;             // Time of alarm is on
int reed_status;

// This is the variable for states "0"
char state = 0;
int faceID = 0; int f1 = 0; int f2 = 1; int f3 = 0;
int systtem = 0, lcd1 = 0;      // system is 0 for off and 1 for on


/*
States for 

  0. - off
  1. - stand-by
  2. - waiting
  3. - countdown
  4. - alarm
  
*/

void setup() {

  Serial.begin(9600);          //Used for troubleshooting
  mySerial.begin(9600);       //Initialise communication between Arduino and GSM SIM900
  x.attach(9);
 // y.attach(10);
  // Serial.print(width);
  //Serial.print("\t");
  //Serial.println(height);
  //x.write(xpos);
 // y.write(ypos);
  
  Serial.println("Initializing...");
  mySerial.println("AT"); //Handshaking with SIM900
  updateSerial();
  mySerial.println("AT+CSQ"); //Signal quality test, value range is 0-31 , 31 is the best
  updateSerial();  
  mySerial.println("AT+CCID"); //Read SIM information to confirm whether the SIM is plugged
  updateSerial(); 
  
  mcp.begin(); // start the mcp object
  for(int i = 0; i <= 15; i++) {mcp.pinMode(i, OUTPUT);}

  keypad.addEventListener(keypadEvent); // an object is created for tracking keystrokes
  
  lcd.init();                    // initialize the lcd 

  pinMode(alarm, OUTPUT);
  pinMode(sensor, INPUT);
  pinMode(reed_sensor, INPUT);
  Serial.println("System startup"); //Used for troubleshooting
  Serial.println("Alarm button status:"); //used for troubleshooting
  // setting lcd to OFF and all mcp23017 pins to LOW
  lcd.noBacklight();
  mcp.digitalWrite(4, LOW);mcp.digitalWrite(5, LOW); mcp.digitalWrite(6, LOW); mcp.digitalWrite(7, LOW); // setting done
  x.write(133);        
}
const int angle = 2;   // degree of increment or decrement
//define mcp objects
//7 is buzzer(alarm)
//6 is greenLED
//5 is yellowLED
//4 is redLED
int i0, i1, i2, i3; 
void loop() {      servo();
     
reed_status = digitalRead(reed_sensor);       // Setting system so that alarm sounds off any time reed sensors are triggered
if (reed_status == HIGH){ //state = 4; systtem = 1; 
    Serial.println("Siren is active !"); //Used for troubleshooting

        // Alarm Tone

   //tone( 10, 10000, 100);  // Simple Alarm Tone
    for(double x = 0; x < 0.92; x += 0.01){  // Elegant Alarm Tone
        tone(A0, sinh(x+8.294), A0);
        delay(1);
        } 
     
        
         if (Serial.available()>0) {
   switch(Serial.read())
  {
    case 's':
      SendMessage();
      break;
  }
        } } // done
 
 servo();

   { 
  timerec = millis();    // read the internal clock
  
 keypad.getKey();

   sensorData = digitalRead(sensor); 
  if (f1 == 0) {if ( (Serial.available() > 0) &  (sensorData == HIGH)){ faceID = 1; f1 = 1;}}
  if (faceID == 1){
    keypad.getKey();
  
    if (systtem%2 == 0)
    {   //servo();
      
    // alarm is off
    mcp.digitalWrite(6, LOW);//greenLED
    mcp.digitalWrite(4, LOW);//redLed
    mcp.digitalWrite(5, HIGH);//yellowLED
    //Serial.println(contact); //Used for troubleshooting

    mcp.digitalWrite(7, LOW);//buzzer(alarm)
    sensorData1 = digitalRead(sensor);
      if (sensorData1 == HIGH){ systtem++; f1 = 0; faceID = 0;}
    state = 0;
   // Serial.println("System is OFF !"); // Used for troubleshooting

    }

  else
    {// systtem == 1;
     servo();
    if(state == 0) 
     {
     state = 1; timerec = millis();
     tempmemory = timerec;
     mcp.digitalWrite(5, HIGH); //yellowLED
     lcd.backlight(); 
        lcd.clear();
        lcd.print("Password: ");
     }
     
    if(state == 1)              // system waiting
      { 
        
      if ((timerec%1000)<500){ mcp.digitalWrite(6, HIGH);} //greenLED
      else {mcp.digitalWrite(6, LOW);} //greenLED
 keypad.getKey();
      if(timerec >= tempmemory + standbytoarmed * 1000) {state = 2;}
       
        }        
      //Serial.println("System is arming !"); // Used for troubleshooting 
             
      if(state == 2)              // system is armed
      {
      mcp.digitalWrite(6, HIGH);  //greenLED
       servo();
 keypad.getKey();sensorData1 = digitalRead(sensor);
   
      sensorData = digitalRead(sensor);  
         
  //    if(sensorData > 600) {state = 3; timpmemorat = ceas;}
     if(sensorData == HIGH)
       { 
        lcd.backlight(); 
        lcd.clear();
        lcd.print("Password: ");
       state = 3; f2++;
        if (f2%4 == 0) { f1 = 0; faceID = 0; systtem = 0; lcd.clear(); lcd.noBacklight(); mcp.digitalWrite(5 , LOW);} // sets alarm to only ring 3 times before the system is reset
       tempmemory = timerec;
       mcp.digitalWrite(6, LOW);  //greenLED
       }
      Serial.println("System is armed !"); // Used for Troubleshooting
      }sensorData1 = digitalRead(sensor);

    if(state == 3)              // system is triggered and countdown
      {             
        
      if ((timerec%500)<100) {mcp.digitalWrite(4, HIGH); //redLED
      }
      else mcp.digitalWrite(4, LOW);  //redLED
 keypad.getKey(); sensorData1 = digitalRead(sensor);   // servo();
      if(timerec >= tempmemory + triggeredtoalarm * 10) {state = 4; tempmemory = timerec;}
      Serial.println("System is triggered and is countdown !"); //Used for troubleshooting
      }

    if(state == 4)              // siren (buzzer) is active
      {
      mcp.digitalWrite(7, HIGH); //buzzer(alarm)
      mcp.digitalWrite(4, HIGH); //redLED
       lcd.backlight();
      Serial.println("Siren is active !"); //Used for troubleshooting
     // tempmemory = timerec;
    //  if (timerec > tempmemory + 1000) {systtem++; tempmemory = timerec;}

      // For Alarm Tone

    //tone( 10, 10000, 100);  // Simple Alarm Tone
    for(double x = 0; x < 0.92; x += 0.01){  // Elegant Alarm Tone
        tone(A0, sinh(x+8.294), A0);
        delay(1);
        } 
     

          //servo();
         if (Serial.available()>0) {
   switch(Serial.read())
  {
    case 's':
      SendMessage();
      break;
  }
        }   
     
    //servo();     
 keypad.getKey();     sensorData1 = digitalRead(sensor);
      if(timerec >= tempmemory + alarmtime * 1000) 
      {state = 2; mcp.digitalWrite(7, LOW); //buzzer (alarm)
       mcp.digitalWrite(4, LOW); //redLED
       lcd.noBacklight();}
      }
    }
  }
}}
  
  //take care of some special events
void keypadEvent(KeypadEvent eKey){ 
  switch (keypad.getState()){ lcd.clear(); lcd.print("Password: "); 
    case PRESSED: 
  lcd.backlight(); 
    lcd.print(eKey);
  Serial.print("Pressed: ");
  Serial.println(eKey);
  switch (eKey){
    case '*': checkPassword(); break;
    case '#': password.reset(); break;
    default: password.append(eKey);
     }
  }
}

  
  void checkPassword(){
  if (password.evaluate()){ lcd.clear();
     timerec = millis ();
     tempmemory = timerec; while 
    (timerec <= tempmemory + 1000){ lcd.setCursor(0, 0); lcd.print("Success"); timerec = millis ();x.write(137);}
   
  password.reset(); lcd.clear();

    tempmemory = timerec; 
 while (timerec <= tempmemory +1000) 
    { lcd.setCursor(0, 0); lcd.print("Disarmed"); timerec = millis ();}
    lcd.clear(); 
    lcd.noBacklight(); 
    mcp.digitalWrite(3, LOW); // unlock door
    tempmemory = timerec;
 
  while (timerec >= tempmemory + 10000) {timerec = millis();} 
      mcp.digitalWrite(3, HIGH); //close the door after some time
       systtem++;
    }
   
    
  
  else
      { lcd.clear(); 
    timerec = millis (); 
      lcd.setCursor(0, 0);
    lcd.print("Wrong");   
         
        tempmemory = timerec; 
    
   
    if 
    (timerec <= tempmemory + 2000)
    {  timerec = millis ();} 
    ledBlink = 0;
    while (ledBlink <= 5){  tempmemory7 = timerec1;
      
       while (timerec1 <= tempmemory7 +100) {mcp.digitalWrite(4, HIGH); tempmemory8 = tempmemory7 +100; timerec1 = millis ();} //redLED
       while (timerec1 <= tempmemory8 +100){ mcp.digitalWrite(4, LOW);timerec1 = millis ();}  //redLED
       
    
    ledBlink++; 
    } lcd.clear(); lcd.print("Password: ");
    password.reset();
  }}
  
  void updateSerial()
{
  timerec = millis(); 
  temp1 = timerec;
       
while (temp1 + 500 >= timerec ){ timerec = millis(); } //A substitute millis() function for delay(500)
  while (Serial.available()) 
  {
    mySerial.write(Serial.read());//Forward what Serial received to Software Serial Port
  }
  while(mySerial.available()) 
  {
    Serial.write(mySerial.read());//Forward what Software Serial received to Serial Port
  }
} 
  
 void SendMessage()
{
    timerec=millis(); temp1 = timerec;
   while (temp1 + 1000 >= timerec ){ timerec = millis(); }
    mySerial.println("AT+CMGF=1");    //Sets the GSM Module in Text Mode
    updateSerial();
    
    temp1 = timerec;
  while (temp1 + 1000 >= timerec ){ timerec = millis(); }
    mySerial.println("AT+CMGS=\"+36307367923\"\r"); // Replace x with mobile number
    updateSerial();
    
    temp1 = timerec;
  while (temp1 + 100 >= timerec ){ timerec = millis(); }
    mySerial.println("Intruder Alert!!!"); // The SMS text you want to send
    updateSerial();
    
    temp1 = timerec;
  while (temp1 + 1000 >= timerec ){ timerec = millis(); }
     mySerial.println((char)26); // ASCII code of CTRL+Z    
     updateSerial();    
 }
 
 void servo()
 { x.write(133);
  if (Serial.available() > 0)
  {
    int x_mid, y_mid;
    if (Serial.read() == 'X')
    {
      x_mid = Serial.parseInt();  // read center x-coordinate
      if (Serial.read() == 'Y')
        y_mid = Serial.parseInt(); // read center y-coordinate
    }
    /* adjust the servo within the squared region if the coordinates
        is outside it
    */
    if (x_mid > width / 2 + 30)
      xpos += angle;
    if (x_mid < width / 2 - 30)
      xpos -= angle;
   /* if (y_mid < height / 2 + 30)
      ypos += angle;
    if (y_mid > height / 2 - 30)
      ypos -= angle; */


    // if the servo degree is outside its range
    if (xpos >= 150)
      xpos = 145;
    else if (xpos <= 90)
      xpos = 95;
   /* if (ypos >= 180)
      ypos = 180;
    else if (ypos <= 0)
      ypos = 0; */

    x.write(xpos);
  //  y.write(ypos);

  }
}

void alarm1(){
    i0 = 0;
      while (i0 <= 1){  
        i1 = 0; i2 = 0; i3 = 0;
        while (i1 <= 3){mcp.digitalWrite (7, HIGH); temp3 = timerec; while (temp3+200 >= timerec){timerec = millis();}
        mcp.digitalWrite (7,LOW); temp3 = timerec; while (temp3+200 >= timerec){timerec = millis();} i1++;}
       /* while (i2 <= 2){mcp.digitalWrite (7, HIGH); temp3 = timerec; while (temp3+100 >= timerec){timerec = millis();}
        mcp.digitalWrite (7,LOW);temp3 = timerec; while (temp3+100 >= timerec){timerec = millis();} i2++;}  */
        while (i3 <= 1000){
        mcp.digitalWrite (7, HIGH); temp3 = timerec; while (temp3 + 45 >= timerec){timerec = millis();};
        mcp.digitalWrite (7,LOW);temp3 = timerec; while (temp3 + 45 >= timerec){timerec = millis();}
         i3 = i3+ 20;} i0++;} 
          {mcp.digitalWrite (7,LOW);}  // end
  }